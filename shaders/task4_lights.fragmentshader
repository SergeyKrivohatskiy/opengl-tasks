#version 330 core

in vec2 uvs;
in vec4 gl_FragCoord;

out vec4 color;

uniform sampler2D base_color;
uniform sampler2D normal;
uniform sampler2D position;
uniform vec3 directional_light;
uniform vec3 directional_light_color;

// Not used for now. May be used for specular
uniform vec3 to_camera_modelspace;

const int MAX_POINT_LIGHTS = 64;
uniform int lights_count;
uniform vec3 points_center[MAX_POINT_LIGHTS];
uniform vec3 points_color[MAX_POINT_LIGHTS];
uniform float points_radius[MAX_POINT_LIGHTS];

void main()
{
    vec3 base_color_ = texture(base_color, uvs).rgb;
    vec3 n = normalize(texture(normal, uvs).xyz);
    vec3 pos_modelspace = texture(position, uvs).xyz;

    vec3 sum_color = base_color_ * 0.3;

    sum_color += base_color_ * directional_light_color * max(dot(n, directional_light), 0);


    for (int light_idx = 0; light_idx < lights_count; light_idx += 1)
    {
        vec3 to_light = points_center[light_idx] - pos_modelspace;
        float distance_to_radius = length(to_light) / points_radius[light_idx];
        if (distance_to_radius > 1.0)
        {
            continue;
        }
        to_light = normalize(to_light);
        float coef = max(dot(to_light, n), 0.0);
        float distance_coef = (1.0 - distance_to_radius) * (1.0 - distance_to_radius);
        sum_color = sum_color + points_color[light_idx] * coef * distance_coef;
    }

    color = vec4(sum_color, 1.0);
}